name: Release Build

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:
    inputs:
      version:
        description: "Target version (e.g., 1.0.0)"
        required: true
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Git identity
        run: |
          git config user.name "${{ secrets.BOT_USERNAME || 'github-actions[bot]' }}"
          git config user.email "${{ secrets.BOT_USEREMAIL || 'github-actions[bot]@users.noreply.github.com' }}"

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            TAG="${GITHUB_REF_NAME#v}"
            echo "version=${TAG}" >> $GITHUB_OUTPUT
          fi

      - name: Update version in package.json
        run: |
          jq --arg version "${{ steps.version.outputs.version }}" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json
          git add package.json
          git commit -m "chore: release v${{ steps.version.outputs.version }}" --allow-empty
          git tag -f "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Generate changelog
        id: changelog
        run: |
          npx changelogithub --output ${{ github.workspace }}/CHANGELOG.txt || echo "" > ${{ github.workspace }}/CHANGELOG.txt

      - name: Build Release
        run: |
          chmod +x build.sh
          ./build.sh --release --compress
        env:
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

      - name: Move regular build
        run: |
          mkdir -p regular-dist
          mv dist/* regular-dist/

      - name: Build Lite Release
        run: |
          chmod +x build.sh
          ./build.sh --release --compress --lite
        env:
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

      - name: Move lite build and restore regular build
        run: |
          mkdir -p lite-dist
          mv dist/* lite-dist/
          mv regular-dist/* dist/

      - name: Upload Release Assets
        run: |
          gh release create \
            "v${{ steps.version.outputs.version }}" \
            --title "Release v${{ steps.version.outputs.version }}" \
            --notes-file "${{ github.workspace }}/CHANGELOG.txt" \
            dist/openlist-frontend-dist-v*.tar.gz \
            lite-dist/openlist-frontend-dist-lite-v*.tar.gz \
            dist/i18n.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
